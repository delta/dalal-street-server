// Code generated by MockGen. DO NOT EDIT.
// Source: pqueue.go

// Package mocks is a generated GoMock package.
package mocks

import (
	models "github.com/delta/dalal-street-server/models"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockBidPQueue is a mock of BidPQueue interface
type MockBidPQueue struct {
	ctrl     *gomock.Controller
	recorder *MockBidPQueueMockRecorder
}

// MockBidPQueueMockRecorder is the mock recorder for MockBidPQueue
type MockBidPQueueMockRecorder struct {
	mock *MockBidPQueue
}

// NewMockBidPQueue creates a new mock instance
func NewMockBidPQueue(ctrl *gomock.Controller) *MockBidPQueue {
	mock := &MockBidPQueue{ctrl: ctrl}
	mock.recorder = &MockBidPQueueMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockBidPQueue) EXPECT() *MockBidPQueueMockRecorder {
	return m.recorder
}

// Push mocks base method
func (m *MockBidPQueue) Push(arg0 *models.Bid) {
	m.ctrl.Call(m, "Push", arg0)
}

// Push indicates an expected call of Push
func (mr *MockBidPQueueMockRecorder) Push(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Push", reflect.TypeOf((*MockBidPQueue)(nil).Push), arg0)
}

// Pop mocks base method
func (m *MockBidPQueue) Pop() *models.Bid {
	ret := m.ctrl.Call(m, "Pop")
	ret0, _ := ret[0].(*models.Bid)
	return ret0
}

// Pop indicates an expected call of Pop
func (mr *MockBidPQueueMockRecorder) Pop() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Pop", reflect.TypeOf((*MockBidPQueue)(nil).Pop))
}

// Head mocks base method
func (m *MockBidPQueue) Head() *models.Bid {
	ret := m.ctrl.Call(m, "Head")
	ret0, _ := ret[0].(*models.Bid)
	return ret0
}

// Head indicates an expected call of Head
func (mr *MockBidPQueueMockRecorder) Head() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Head", reflect.TypeOf((*MockBidPQueue)(nil).Head))
}

// Size mocks base method
func (m *MockBidPQueue) Size() int {
	ret := m.ctrl.Call(m, "Size")
	ret0, _ := ret[0].(int)
	return ret0
}

// Size indicates an expected call of Size
func (mr *MockBidPQueueMockRecorder) Size() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Size", reflect.TypeOf((*MockBidPQueue)(nil).Size))
}

// Empty mocks base method
func (m *MockBidPQueue) Empty() bool {
	ret := m.ctrl.Call(m, "Empty")
	ret0, _ := ret[0].(bool)
	return ret0
}

// Empty indicates an expected call of Empty
func (mr *MockBidPQueueMockRecorder) Empty() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Empty", reflect.TypeOf((*MockBidPQueue)(nil).Empty))
}

// MockAskPQueue is a mock of AskPQueue interface
type MockAskPQueue struct {
	ctrl     *gomock.Controller
	recorder *MockAskPQueueMockRecorder
}

// MockAskPQueueMockRecorder is the mock recorder for MockAskPQueue
type MockAskPQueueMockRecorder struct {
	mock *MockAskPQueue
}

// NewMockAskPQueue creates a new mock instance
func NewMockAskPQueue(ctrl *gomock.Controller) *MockAskPQueue {
	mock := &MockAskPQueue{ctrl: ctrl}
	mock.recorder = &MockAskPQueueMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockAskPQueue) EXPECT() *MockAskPQueueMockRecorder {
	return m.recorder
}

// Push mocks base method
func (m *MockAskPQueue) Push(arg0 *models.Ask) {
	m.ctrl.Call(m, "Push", arg0)
}

// Push indicates an expected call of Push
func (mr *MockAskPQueueMockRecorder) Push(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Push", reflect.TypeOf((*MockAskPQueue)(nil).Push), arg0)
}

// Pop mocks base method
func (m *MockAskPQueue) Pop() *models.Ask {
	ret := m.ctrl.Call(m, "Pop")
	ret0, _ := ret[0].(*models.Ask)
	return ret0
}

// Pop indicates an expected call of Pop
func (mr *MockAskPQueueMockRecorder) Pop() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Pop", reflect.TypeOf((*MockAskPQueue)(nil).Pop))
}

// Head mocks base method
func (m *MockAskPQueue) Head() *models.Ask {
	ret := m.ctrl.Call(m, "Head")
	ret0, _ := ret[0].(*models.Ask)
	return ret0
}

// Head indicates an expected call of Head
func (mr *MockAskPQueueMockRecorder) Head() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Head", reflect.TypeOf((*MockAskPQueue)(nil).Head))
}

// Size mocks base method
func (m *MockAskPQueue) Size() int {
	ret := m.ctrl.Call(m, "Size")
	ret0, _ := ret[0].(int)
	return ret0
}

// Size indicates an expected call of Size
func (mr *MockAskPQueueMockRecorder) Size() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Size", reflect.TypeOf((*MockAskPQueue)(nil).Size))
}

// Empty mocks base method
func (m *MockAskPQueue) Empty() bool {
	ret := m.ctrl.Call(m, "Empty")
	ret0, _ := ret[0].(bool)
	return ret0
}

// Empty indicates an expected call of Empty
func (mr *MockAskPQueueMockRecorder) Empty() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Empty", reflect.TypeOf((*MockAskPQueue)(nil).Empty))
}
