// Code generated by MockGen. DO NOT EDIT.
// Source: ./matchingengine/OrderBook.go

// Package mocks is a generated GoMock package.
package mocks

import (
	models "github.com/delta/dalal-street-server/models"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockOrderBook is a mock of OrderBook interface
type MockOrderBook struct {
	ctrl     *gomock.Controller
	recorder *MockOrderBookMockRecorder
}

// MockOrderBookMockRecorder is the mock recorder for MockOrderBook
type MockOrderBookMockRecorder struct {
	mock *MockOrderBook
}

// NewMockOrderBook creates a new mock instance
func NewMockOrderBook(ctrl *gomock.Controller) *MockOrderBook {
	mock := &MockOrderBook{ctrl: ctrl}
	mock.recorder = &MockOrderBookMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockOrderBook) EXPECT() *MockOrderBookMockRecorder {
	return m.recorder
}

// LoadOldTransactions mocks base method
func (m *MockOrderBook) LoadOldTransactions(txs []*models.Transaction) {
	m.ctrl.Call(m, "LoadOldTransactions", txs)
}

// LoadOldTransactions indicates an expected call of LoadOldTransactions
func (mr *MockOrderBookMockRecorder) LoadOldTransactions(txs interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadOldTransactions", reflect.TypeOf((*MockOrderBook)(nil).LoadOldTransactions), txs)
}

// LoadOldAsk mocks base method
func (m *MockOrderBook) LoadOldAsk(arg0 *models.Ask) {
	m.ctrl.Call(m, "LoadOldAsk", arg0)
}

// LoadOldAsk indicates an expected call of LoadOldAsk
func (mr *MockOrderBookMockRecorder) LoadOldAsk(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadOldAsk", reflect.TypeOf((*MockOrderBook)(nil).LoadOldAsk), arg0)
}

// LoadOldBid mocks base method
func (m *MockOrderBook) LoadOldBid(arg0 *models.Bid) {
	m.ctrl.Call(m, "LoadOldBid", arg0)
}

// LoadOldBid indicates an expected call of LoadOldBid
func (mr *MockOrderBookMockRecorder) LoadOldBid(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadOldBid", reflect.TypeOf((*MockOrderBook)(nil).LoadOldBid), arg0)
}

// AddAskOrder mocks base method
func (m *MockOrderBook) AddAskOrder(arg0 *models.Ask) {
	m.ctrl.Call(m, "AddAskOrder", arg0)
}

// AddAskOrder indicates an expected call of AddAskOrder
func (mr *MockOrderBookMockRecorder) AddAskOrder(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddAskOrder", reflect.TypeOf((*MockOrderBook)(nil).AddAskOrder), arg0)
}

// AddBidOrder mocks base method
func (m *MockOrderBook) AddBidOrder(arg0 *models.Bid) {
	m.ctrl.Call(m, "AddBidOrder", arg0)
}

// AddBidOrder indicates an expected call of AddBidOrder
func (mr *MockOrderBookMockRecorder) AddBidOrder(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddBidOrder", reflect.TypeOf((*MockOrderBook)(nil).AddBidOrder), arg0)
}

// CancelAskOrder mocks base method
func (m *MockOrderBook) CancelAskOrder(arg0 *models.Ask) {
	m.ctrl.Call(m, "CancelAskOrder", arg0)
}

// CancelAskOrder indicates an expected call of CancelAskOrder
func (mr *MockOrderBookMockRecorder) CancelAskOrder(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelAskOrder", reflect.TypeOf((*MockOrderBook)(nil).CancelAskOrder), arg0)
}

// CancelBidOrder mocks base method
func (m *MockOrderBook) CancelBidOrder(arg0 *models.Bid) {
	m.ctrl.Call(m, "CancelBidOrder", arg0)
}

// CancelBidOrder indicates an expected call of CancelBidOrder
func (mr *MockOrderBookMockRecorder) CancelBidOrder(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelBidOrder", reflect.TypeOf((*MockOrderBook)(nil).CancelBidOrder), arg0)
}

// StartStockMatching mocks base method
func (m *MockOrderBook) StartStockMatching() {
	m.ctrl.Call(m, "StartStockMatching")
}

// StartStockMatching indicates an expected call of StartStockMatching
func (mr *MockOrderBookMockRecorder) StartStockMatching() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartStockMatching", reflect.TypeOf((*MockOrderBook)(nil).StartStockMatching))
}
